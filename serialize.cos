use "type";
use "error";
use "regex";


/*
 This library can convert data to single string like php serialize().
*/

public function serialize(data){
  if(type(data, "array")){
    ad = "a:"+data->length()+":{";
      foreach(data as key : value){
        ad = ad+serialize(key)+serialize(value);
      }
    return ad+"}";
  }elseif(type(data, "string")){
    return 's:'+data->length()+':"'+data+'";';
  }elseif(type(data, "int")){
    return 'i:'+data+';';
  }elseif(type(data,"bool")){
     if(data){
        return "b:1;";
     }else{
        return "b:0;";
     }
  }else{
     return "N;"//defult value is null
  }
}

public function unserialize(string data){
  return new Us(data->toChars())->render();
}

class Us{
  private char = [];
  privats pointer = -0;

  Us(array char){
   this->char = char;
  }

  public function render(){
     if(buffer = this->pop() == 'a'){
       return this->renderArray();
     }elseif(buffer == 's'){
       return this->renderString();
     }elseif(buffer == 'i'){
       return this->renderInt();
     }elseif(buffer == 'i'){
       return this->renderBool();
     }elseif(buffer == 'N'){
        return this->renderNull();
     }else{
        error("unkown tokrn "+buffer);
     }
  }

  private function renderNull(){
      if(this->pop() != ';'){
        error('missing ; after N');
      }

      return null;
  }

  private function renderBool(){
     if(this->pop() != ':'){
       error('missing : after b');
     }

     if((b = this->pop()) != '0' && b != '1'){
        error('unknown bool value');
     }

     if(this->pop() != ';'){
       error('missing ; in end of bool');
     }

     return b == '1';
  }

  private function renderInt(){
     if(this->pop() != ':'){
       error('missing : after i');
     }

     i = this->getInt();

     if(this->pop() != ';'){
       error("missing ; in end of int");
     }

     return i;
  }

  private function renderString(){
     if(this->pop() != ':'){
        error("missing ':' after 's'");
     }

     length = this->getInt();

     if(this->pop() != ':'){
        error("missing ':' after string length");
     }

     if(this->pop() != '"'){
        error('missing " in the begin of string");
     }

     result = "";
     i = -1;
     while(i++ < length){
       result = result+this->pop();
     }

     if(this->pop() != '"'){
        error('missing " in end of string');
     }

     if(this->pop() != ';'){
        error('missing ; in end of string');
     }

     return result;
  }

  private function renderArray(){
     if(this->pop() != ':'){
        error("missing ':' after 'a'");
     }

     length = this->getInt();

     if(this->pop() != ':'){
        error("missing ':' after array length");
     }

     if(this->pop() != '{'){
       error("missing '{' after ':'");
     }

     i = -1;
     result = [];
     while(i++<length){
       result[this->render()] = this->render();
     }

     if(this->pop() != '}'){
        error("missing } in end of array");
     }

     return result;
  }

  private function getInt(){
      result = "";
      regex = new Regex("^[a-zA-Z]$");
      
      while(regex->match(this->peek())){
          result = result+this-pop();
      }

      if(result == ""){
         return 0;
      }

      return toInt(result);
  }

  private function peek(){
    if(this->contain(this->pointer+1)){
       return this->char[this->pointer+1];
    }

    return null;
  }

  private function pop(){
    if(this->contain(this->pointer++)){
       return this->char[this->pointer];
    }

    return null;
  }

  private function contain(int){
      return int <= this->char->length();
  }
}
